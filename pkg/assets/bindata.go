// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package main generated by go-bindata.// sources:
// templates/add.gohtml
// templates/detail.gohtml
// templates/list.gohtml
// templates/mediapath.gohtml
// templates/shutdown.gohtml
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAddGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\x3b\x6f\xdb\x30\x10\xde\xf5\x2b\x2e\x87\x8e\x55\xd8\x66\x2a\x02\x52\x40\xe0\x66\x6d\x8c\xb4\x4b\x47\x5a\x3c\x95\x6c\xf9\x10\xc8\xa3\xdd\xc0\xd0\x7f\x0f\x64\x49\x89\x87\x4c\x7a\x7c\x0f\x7e\x77\x1f\xe5\xcd\xf7\xa7\xdd\xaf\xdf\xfb\x47\xb0\x1c\x7c\xd7\xc8\xf9\x01\x5e\xc7\x3f\x0a\x29\xe2\xfc\x83\xb4\xe9\x1a\x00\x00\x19\x88\x35\xf4\x56\xe7\x42\xac\xb0\xf2\xd0\x7e\xc3\x6b\x28\xea\x40\x0a\x8f\x8e\x4e\x63\xca\x8c\xd0\xa7\xc8\x14\x59\xe1\xc9\x19\xb6\xca\xd0\xd1\xf5\xd4\x5e\x3e\x3e\x83\x8b\x8e\x9d\xf6\x6d\xe9\xb5\x27\xf5\xf5\xf6\xcb\x07\x56\x4c\xff\xaf\x6d\x3e\x60\xe8\xca\x36\xe5\x2b\xce\x13\x73\x82\x9f\xbd\xad\xde\xf0\xc6\x67\xc7\x9e\xba\x67\x57\xfe\xc1\x43\x29\x54\x4a\xa0\xc8\xf0\xb0\xdf\x4b\xb1\x40\x8d\x14\xcb\x98\xf2\x90\xcc\x4b\xd7\x9c\xcf\x9f\x1e\x73\x4e\x19\xee\x15\xdc\x4e\x13\xc8\x9b\xb6\x85\x5d\x4a\x1e\x0a\xd7\x61\x80\xb6\xed\x1a\x69\xdc\x11\x7a\xaf\x4b\x51\xd8\x53\x64\xca\x64\xd6\x03\xcf\x67\xa6\x30\x7a\xcd\x04\x58\x6c\x65\x93\x4e\x11\xa7\x69\x09\x63\xef\xba\x5d\xa6\x19\x1b\x73\xfa\x4b\x3d\x4b\x61\xef\xd6\xa0\x1a\x6c\xa6\x41\xa1\xc0\xee\x99\xb8\xe6\x28\x85\xde\x2c\xdd\x00\x6b\xa8\xd5\xe9\xa2\x18\xb7\x08\x34\x43\xd8\x6d\xc9\xa7\x49\x8a\x71\x93\x52\x34\xdb\xe9\x43\xca\x01\x74\xcf\x2e\x45\x85\x42\x1b\x83\x10\x88\x6d\x32\x0a\xc7\x54\x18\x41\x57\x4e\x7d\x0a\xa3\x27\x26\x85\x69\x18\xd6\x99\x2e\x6a\xaf\x0f\xe4\x61\x48\x59\xe1\x1a\x1e\xbb\xfd\xf2\x02\x3f\x74\xa0\x7b\x29\x2e\x94\x2b\x89\x8b\x63\x65\x70\xe6\x5d\x01\xfc\x32\xbe\x75\xbb\xb4\xf8\x66\xf6\xae\x3b\x54\xe6\x14\x57\x6e\xa9\x87\xe0\x18\xd7\xc5\x49\xb1\x80\xeb\xd2\xc4\x3c\xd3\x5c\xa1\x71\xc7\xae\x69\xa4\x58\x3a\x94\xe2\x72\xa3\x5f\x03\x00\x00\xff\xff\x37\x2a\xc1\x15\xe1\x02\x00\x00")

func templatesAddGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesAddGohtml,
		"templates/add.gohtml",
	)
}

func templatesAddGohtml() (*asset, error) {
	bytes, err := templatesAddGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/add.gohtml", size: 737, mode: os.FileMode(420), modTime: time.Unix(1584480060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDetailGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6f\x6f\xdb\x38\xd2\x7f\x9f\x4f\x31\xcb\xe7\xc1\xad\x82\x8d\x25\x27\x69\x8b\x22\x91\x0c\xe4\x92\x14\x9b\xbd\x6d\x13\x38\x29\xb6\x87\xa2\x28\x68\x71\x6c\xb1\xa5\x49\x1d\x49\xd9\x09\x02\x7f\xf7\x03\x49\xd9\x96\x64\xa5\x97\xdd\xf6\xd5\xe1\xfc\xc6\x26\xe7\x37\x3f\x92\xf3\x8f\xc3\x24\xfd\xe9\xe2\xfa\xfc\xee\x9f\x37\x97\x50\xd8\xb9\x18\xed\xa5\xee\x0b\x04\x95\xb3\x8c\xa0\x24\x6e\x02\x29\x1b\xed\x01\x00\xa4\x73\xb4\x14\xf2\x82\x6a\x83\x36\x23\x95\x9d\x0e\x5e\x93\xa6\x48\xd2\x39\x66\x64\xc1\x71\x59\x2a\x6d\x09\xe4\x4a\x5a\x94\x36\x23\x4b\xce\x6c\x91\x31\x5c\xf0\x1c\x07\x7e\x70\x00\x5c\x72\xcb\xa9\x18\x98\x9c\x0a\xcc\x0e\xe3\x61\x0f\x95\xc5\xfb\x26\x4d\x0f\x82\x56\xb6\x50\xba\x81\xb9\xb6\x56\xc1\x6d\x5e\x54\x82\xd9\x35\xde\x72\x2b\x70\x34\xe6\xe6\x2b\x9c\x19\x83\xc6\xcc\x51\x5a\x38\xbb\xb9\x49\x93\x20\x0a\x30\xc1\xe5\x57\xd0\x28\x32\x62\x0a\xa5\x6d\x5e\x59\xe0\xb9\x92\x04\x0a\x8d\xd3\x8c\x24\xc6\x3e\x08\x4c\xf8\x9c\xce\xd0\x24\x53\xba\x70\xc2\xb8\x94\xb3\xf5\x32\x5e\x1e\x7e\xbb\x8f\xa5\x13\x81\x07\xe0\xce\x6a\x19\x3c\x6e\xe6\xdd\x67\xa2\x34\x43\x7d\x02\x87\xe5\x3d\x18\x25\x38\x83\x89\xa0\xf9\xd7\xd3\x0d\x68\xd5\xa6\xe9\x55\x1f\xe4\x4a\x08\x5a\x1a\x3c\x81\xf5\xaf\xd3\x16\xcc\x5b\xfa\x04\x5e\x0e\x87\xe5\x7d\x2f\xb5\xdb\x9a\xee\x70\x17\xc8\x67\x85\x3d\x81\xa3\x27\x94\x68\x07\x9f\x2b\xa1\xf4\x09\xfc\xdf\x70\x7a\x8c\xaf\x5e\xb7\x37\x90\x57\xda\x38\x61\xa9\xb8\xb4\xa8\x7b\xe9\x4e\x0a\xb5\xc0\xee\x26\x36\xa4\xc3\xb3\xd7\x6f\xde\x74\xf5\xd2\xa4\x36\x75\x9a\x84\xe8\x4c\x27\x8a\x3d\x8c\xf6\x1e\x1f\xff\xdf\x39\xf9\x2d\xb5\x9a\xdf\xc3\x49\x06\xf1\x76\xb8\x5a\x41\xfa\xd3\x60\x00\xe7\x4a\x09\x30\xb6\x9a\x4e\x61\x30\xd8\xa8\x98\x0d\xda\x3c\x01\x4c\x19\x5f\x40\x2e\xa8\x31\x19\xc9\xd1\x9d\x06\x59\xed\xf8\xc7\x47\x8b\xf3\x52\x50\x8b\x40\x4c\x51\x59\xa6\x96\x92\xac\xea\xad\x16\x47\xa3\xf1\xd5\xed\x3f\xe0\xed\xd9\xdd\xf8\xea\x03\x5c\x5c\xde\x9d\x5d\xfd\x9e\x26\xc5\x51\x1d\x34\x7c\x3e\x03\xa3\xf3\x8c\x24\x73\x64\x9c\x26\xad\x33\xc4\x37\xd4\x16\xab\x15\x01\x2a\x6c\x46\x7c\x00\x07\x01\x09\xbe\xcd\x48\x1b\xfe\x96\xda\xab\xf9\xec\x0f\x27\x72\x5a\xc1\x95\xfd\xa0\x5f\xbd\x6c\xb5\x5a\x07\x6f\x71\x3c\xba\xd1\xea\x0b\xe6\xd6\x67\xd6\x49\x9a\x14\xc7\xb5\xa8\x1c\x75\x36\x15\x70\xab\x55\x9a\x94\x35\x64\xa2\xeb\x1f\x74\x9d\x2c\x64\x34\x46\x5b\x69\x99\x26\x74\x17\xa3\x64\x2e\x78\xfe\x35\x23\x05\x95\x4c\xa0\xe3\x3e\xd7\x48\x2d\x57\x32\xda\x27\xa3\x33\xc6\x40\xbb\xc3\x72\x09\x8d\x43\xf7\x52\x71\x96\x91\x2f\xe6\xb3\xa1\x0b\x24\x7d\xbc\xe6\x96\x2e\x30\xc2\x05\x4a\xbb\x4f\x46\x6e\xb0\xa5\xe1\xb2\xac\xac\x4b\x30\x2e\x19\xde\x67\x64\x70\x48\xd6\x7c\x6e\xf9\xcf\x73\xbf\xec\x67\xce\x08\x14\x9c\x31\x94\xb0\xa0\xa2\xc2\xae\x41\xaf\x2e\xb6\x66\x0c\xd9\xea\x48\xe6\x0f\x77\xee\x37\xd9\x16\x84\xd4\xea\x51\x2b\xca\x53\x5b\xf8\xaa\x94\x26\xb6\xd8\x95\xdc\x68\x35\xa1\x13\x2e\xb8\x7d\xe8\x07\x5c\xcd\x4b\x9a\xdb\x7e\x99\x37\xdb\xb9\x0b\x57\x3e\xe5\xb9\xb7\xec\x37\x80\x63\x34\xa5\x92\x06\xe1\x46\xd0\x27\x70\x67\xf9\x2e\x47\x9a\x34\x4f\xf4\xf8\xc8\xa7\x30\xb3\x10\x09\x94\x10\xb2\x6a\x1f\x86\xb0\x5a\xb5\xb8\x1e\x1f\x35\x95\x33\xac\x01\x1d\x61\xaf\x95\xb6\x02\x36\xaa\x5d\xc6\xb8\x71\xb6\x65\x5b\x7f\xc4\xef\xe8\x1c\x9d\x1b\xd2\xc4\xb2\xbf\xa2\xdf\xb0\xf6\xf7\xd0\x04\x9f\x7c\x0f\x43\xdb\x69\xdf\xc3\x74\x6b\x35\xb5\x38\x7b\xce\x79\x7a\x53\xf2\x02\x05\xda\x4d\xee\x00\xa3\x96\x0e\x5c\x5e\x0c\x5c\x78\xbb\xb3\xfa\xb8\x67\x1e\xe5\x92\xaa\x7f\x8d\x76\x90\x80\x0f\x01\x94\xac\xe1\xf9\xe6\x38\x4d\x7c\x06\xb9\xd2\xce\xf8\x62\xb4\xb7\x97\x9a\x5c\xf3\xd2\x06\x86\x69\x25\x7d\x18\x42\x5f\xdd\x68\x5c\x21\x49\x02\x33\xb4\xe1\xea\xdc\x4c\x8a\xf5\x0c\x64\xc0\x54\x5e\xb9\x26\x20\x9e\xa1\xbd\x14\xe8\x7e\xfe\xfd\xe1\x8a\x45\x9b\xac\xdd\x3f\x6d\x92\x71\x69\x50\xdb\xc4\x71\x4a\x5c\x82\x56\xcb\x16\xab\xc4\xe5\x58\x2d\x21\x0b\xf4\x71\x40\x8f\xd5\x32\x1a\x1c\x3e\xc9\x93\xa3\x10\xa6\xc5\xe2\x66\x0e\x21\xab\xd9\x6a\x96\x73\x14\x22\x1a\x36\x58\xd6\xc8\xa3\x5e\xe4\x61\x0f\xf2\xb8\x17\x79\xd4\x83\x7c\xd1\x8b\x3c\xee\x41\xbe\xec\x45\xbe\xe8\x20\x05\x37\x16\x32\xf8\xe8\x4f\x76\x10\xb6\x1d\xbe\x8e\xc3\xd7\x8b\xf0\xf5\xf2\x53\xcb\x4a\xb4\x2c\x51\x32\x08\x71\xcd\xa5\x55\x1d\x63\x4d\x95\x76\x45\xc6\x02\x87\x0c\x86\xa7\xc0\x21\xf5\x4b\xc5\x02\xe5\xcc\x16\xa7\xc0\x7f\xf9\x65\xbf\xd3\x50\x24\x09\xe4\x2e\x52\xb0\xa6\xc5\xe0\xf4\x16\xc6\x53\x7a\x69\x23\x40\x82\x56\x1d\x23\x11\xb9\x7a\x77\xf3\xfe\xae\x19\x1d\x35\x39\xc3\x29\x97\x6b\x72\xfb\x50\x62\x0b\xe0\xa7\x63\x37\x0d\x19\x84\xae\x76\x87\x41\xc9\xda\x07\x91\xbf\xfa\xf2\x56\x19\xd8\x87\x25\xae\x53\x1c\x6c\x81\x1e\xda\x5e\x62\x0a\x11\x87\x2c\xcb\xe0\xb8\x7b\xf6\xed\x0e\x36\x45\x22\x03\xab\xab\x4e\xb7\xb8\xea\xee\xa8\xdf\x0f\x6d\x93\x71\x63\x3f\xf2\x4f\x71\x80\x9e\x17\x5c\xb0\xc8\xe3\xf7\x9b\x3d\x5b\x3b\x05\x3c\xcb\x2b\x77\xa0\x25\x17\x02\x28\x63\x40\x21\xaf\x8c\x55\x73\x98\x9b\xd9\x4e\xac\xbd\xea\x8d\xb5\x97\x8d\x15\x3c\x2a\xe6\x52\xa2\xbe\xc3\x7b\xe7\x3e\xe2\xfa\x01\xf8\x1b\x68\x9c\x6a\x34\x85\xb3\xce\x83\xaa\x60\x49\xa5\x05\xab\xc0\x60\xb0\x62\xa8\x5d\xa0\x4a\x67\x63\x72\xba\xd7\xda\x29\x9d\x5a\xd4\x80\xf7\x25\x95\x8c\xcb\x99\x57\x08\xf5\x63\x89\x30\x53\x8e\xc7\x4d\x39\x13\xa9\x29\x94\x74\x86\x71\x53\xfd\x0f\x84\xb9\x6b\xb1\x36\x8b\xe6\x85\xbf\xf8\x6c\xc1\x0d\x4c\xb0\xa0\x0b\xae\x34\x2c\x0b\x94\xc0\xe7\xa5\x56\x8b\xf5\x1a\xef\xaf\xb6\x3c\x4b\x2e\x99\x5a\xc6\x26\xd7\x4a\x88\x3b\x15\x0d\x0f\x36\x81\xe9\x5a\xde\x5a\x10\x7a\xb9\xda\x20\xb5\xb9\x7b\x4a\x65\xdd\x0a\x35\xc3\x03\xe3\x52\xfb\xfa\x7e\x81\x53\x5a\x09\x1b\xb5\xeb\xd5\x8f\x2b\xa2\x4e\x4f\xab\xa5\xd9\x14\x49\x37\xe8\xaf\x16\x9f\x3a\x5a\x9b\x46\xeb\xea\xe2\x5b\x8b\xee\x36\x6d\xfb\xb1\xbf\x0b\x4f\xdb\xf1\x37\x75\x46\xd6\x08\x54\x23\x48\x15\x36\x15\x29\x29\x1e\xbc\xf1\xdd\x7b\x02\xb5\xf9\x39\xec\x72\xff\xc0\xe7\x9d\x02\xa9\x6c\xc1\xe5\x36\x36\x5d\xb6\x39\xcd\xba\xe4\xf8\xbc\x3b\xec\xe6\x9d\xf6\x0d\x70\xcf\x9b\xa7\x55\xc0\x0e\x43\x01\x6b\xb0\xf5\x16\x30\x07\x57\x93\x2f\x90\xc1\xe3\xea\x74\x47\xe2\x4b\x46\xe6\x49\x5c\x3a\xfa\x7a\xf9\x71\xf8\x29\xce\x5d\x46\xbe\x53\x0c\xfd\xa8\x36\x47\x57\xb9\xdc\xb6\x3e\x3b\x1c\x87\xcf\xe4\xe0\xbe\xef\xd9\x51\x3f\x7a\xa6\x7a\xbb\xda\xed\xd0\x1c\x3f\x93\xc6\xd4\x1d\xcf\x0e\xc1\x8b\x27\x08\xba\x25\x6f\x41\x05\x67\x61\x0f\xa6\x50\x95\x60\x30\xc1\x3a\x3d\x91\xed\xd4\xdb\x60\xf5\x2c\x03\x42\xfa\x6a\x6e\xae\xa4\xe5\xb2\xc2\x4e\x95\x6d\x0d\xd5\xe4\xcb\x47\xd2\x89\xdb\x4f\x90\x41\x49\xb5\xc1\x2b\x69\xa3\x66\xf8\x77\xae\x1d\xaf\xeb\x1e\x6b\x5e\xc3\x01\x7b\xe4\x0d\xe7\xb6\x89\x1b\x82\x3e\xde\xe0\xd0\xb6\x4a\x98\xeb\x43\xb7\xfd\xe7\xb5\xda\x53\x3d\x3a\x6b\x67\x79\xf4\x7a\x70\xba\x73\xbd\xc4\x65\x65\x8a\x48\x4d\xbe\x3c\x79\xa5\xcc\xe9\x57\x84\xb3\xdf\xce\x3e\x80\xc6\x7f\x55\x68\x6c\xab\x7e\xdc\x17\x3a\x5c\x20\xf0\xe1\xed\xef\xbf\x5a\x5b\x8e\x03\x28\xea\x54\xa7\xa9\xd2\xf3\x0b\x6a\x69\x0d\x7e\x53\x0f\x1d\xac\xb9\x58\x28\xa7\xa0\xeb\x17\xd3\x46\x74\x5f\xe8\x58\x49\x8d\x94\x3d\x18\x4b\x2d\xd6\xd5\x3e\xdb\x16\xe2\xa8\x1b\x23\x7c\x1a\x39\x2d\xaf\x73\xeb\x74\x7c\x2c\xb5\x77\x19\x5f\x5c\xbf\xbb\xdc\xef\xb9\xcf\xa7\xe0\x95\xdd\x5a\x95\xf1\x8a\x47\xc3\x61\x0f\x10\x42\x20\x1a\x25\x30\x16\x6a\x16\x91\xdb\xf7\xe7\xe7\x97\xb7\xb7\xdd\x1e\x66\xfd\xa9\x6f\x1c\xa1\x36\xa9\x48\x5c\xbf\x9a\x10\xf8\xa5\x55\x8a\x77\x94\x57\x80\xc2\x60\xdf\xc6\x5e\x0c\x87\x7d\xe9\xe1\x3e\x54\xa0\xb6\xb5\x15\x82\x41\xdd\x05\xde\xb3\xb5\x9a\xfd\x19\xe7\xbb\x1c\x8f\xaf\xc7\x4f\x9d\xae\x89\x7c\xc6\xaa\x7f\x6e\x8b\x4f\x74\x53\xab\x46\x00\xad\x83\xac\x6e\x98\x22\xe2\x1e\x55\xe4\x00\x7e\xbb\xbd\x7e\x17\x1b\xab\xb9\x9c\xf1\xe9\x43\xe4\xe2\x7e\xbf\xb1\x84\x0f\xae\x12\x65\x44\x6e\xae\x6f\xef\xc8\x01\xfc\x9c\x50\xc6\xfc\x63\xcc\xfc\xdc\xc1\x19\xc7\xbb\x5e\xe7\x3f\xf6\x04\xeb\x37\xde\x73\x9b\x82\xf5\x65\xe3\xef\x62\x8c\x2d\xd5\x33\xf4\x77\xf1\x99\xb5\x9a\x4f\x2a\x8b\xe1\x4c\xeb\x87\x22\xe9\xa4\xcf\xff\x72\xf5\x07\xe6\xea\x0f\x6a\x8f\xfa\xa8\xff\x7a\x19\xf8\xef\xcc\x53\x6f\x3b\xce\xc8\x41\x1d\xfd\xdf\x4e\xce\xf0\xae\xf8\x33\xf9\x99\x26\xeb\xbf\x73\xec\xa5\x49\xf8\x6b\x76\x9a\xf8\x7f\xc9\xfc\x3b\x00\x00\xff\xff\x56\xae\x76\x9a\xa2\x19\x00\x00")

func templatesDetailGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDetailGohtml,
		"templates/detail.gohtml",
	)
}

func templatesDetailGohtml() (*asset, error) {
	bytes, err := templatesDetailGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/detail.gohtml", size: 6562, mode: os.FileMode(420), modTime: time.Unix(1584291349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesListGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x61\x6f\xdb\x36\x10\xfd\xee\x5f\x71\xe5\x06\x54\x06\x22\x29\x5b\xbf\x0c\x89\xa8\x21\x88\x33\xac\x43\xbb\x18\x76\x06\x74\x9f\x0a\x46\x3c\x49\x9c\x69\x52\x23\x4f\xb6\x03\x41\xff\xbd\x90\x64\x2b\x8a\x9b\x00\xe5\x17\x9b\xbe\x77\xef\x3d\x3e\x9e\xe4\xe4\xdd\xe2\xfe\xf6\xe1\xdf\xe5\x1d\x94\xb4\xd5\xe9\x2c\xe9\x3e\x40\x0b\x53\x70\x86\x86\x75\x3f\xa0\x90\xe9\x0c\x00\x20\xd9\x22\x09\xc8\x4a\xe1\x3c\x12\x67\x35\xe5\xe1\x6f\x6c\x5a\x32\x62\x8b\x9c\xed\x14\xee\x2b\xeb\x88\x41\x66\x0d\xa1\x21\xce\xf6\x4a\x52\xc9\x25\xee\x54\x86\x61\xbf\xb9\x00\x65\x14\x29\xa1\x43\x9f\x09\x8d\xfc\x97\xe8\xf2\x15\x2a\xc2\xc3\x94\xe6\x15\x84\xa8\xa9\xb4\x6e\x82\xb9\x27\xb2\xb0\xce\xca\x5a\x4b\x3a\xe1\x49\x91\xc6\x74\xa5\xfc\x06\x6e\xbc\x47\xef\xb7\x68\x08\x6e\x96\xcb\x24\x1e\x4a\x03\x4c\x2b\xb3\x01\x87\x9a\x33\x5f\x5a\x47\x59\x4d\xa0\x32\x6b\x18\x94\x0e\x73\xce\x62\x4f\x4f\x1a\x63\xb5\x15\x05\xfa\x38\x17\xbb\xae\x18\x55\xa6\xe8\x52\x8a\x87\x98\x92\x47\x2b\x9f\xd2\x59\xd3\xfc\xdc\xa9\x7d\x16\xe4\xd4\xe1\x93\xf2\x04\x57\x1c\xa2\xb6\x85\xe4\x5d\x18\xc2\xad\xb5\x1a\x3c\xd5\x79\x0e\x61\x98\xce\x12\xa9\x76\x90\x69\xe1\x3d\x67\x19\x1a\x42\x87\xf2\xe8\xbc\x69\x08\xb7\x95\x16\x84\xc0\x7c\x59\x93\xb4\x7b\xc3\xda\x76\xb0\x5b\x7e\x48\x7b\x6a\x9b\xc3\xd2\xd9\xff\x30\x23\x7f\x95\xc4\xe5\x87\x53\xab\xca\xa1\x20\x08\x34\x1a\x38\x73\x33\x87\x4b\x38\xb2\xf4\x4c\x75\x67\xe7\x49\x23\x67\x5a\x79\x0a\xfb\xef\x57\x60\xac\xc1\xeb\xa3\x91\xd3\x6a\x1a\x27\x4c\x81\xe7\x84\x13\xb2\x91\x54\xab\x34\x11\xa7\xe8\x0a\xa4\xb8\x69\xa2\x8f\x8b\xb6\x65\x69\xd3\x44\x47\xc3\x6d\x9b\xc4\x22\x85\x11\xf7\x13\x03\x6b\x32\xad\xb2\x0d\x67\xa5\x30\x52\xe3\xb3\xce\x02\x35\x12\x06\xb8\x43\x43\x73\x06\x52\x90\x08\x9d\xf2\x9b\x70\xdb\x97\x43\x25\x39\x1b\x25\x64\x0f\xee\xc8\x93\x58\xab\xf3\x33\xa0\x91\xd3\xe3\xc7\xb5\x3e\x65\x86\xda\xe3\xb4\x54\x9d\x82\xc9\xac\xb6\xee\x0a\xfa\xab\x79\x28\xd1\x21\x08\x87\x60\x2c\x74\x16\x60\xb0\x00\x0e\x0b\xe5\xfb\xfb\x8b\x92\xb8\x1a\x39\x47\xb5\xe4\xd1\x1d\x47\x6d\x0c\x46\x48\xc9\xd2\x5b\x87\xdd\x15\x1b\xdc\x4f\xe9\x7e\xef\xec\xcf\x92\x58\xaa\x5d\x3a\x9b\x25\x3e\x73\xaa\xa2\xa1\x3f\xaf\x4d\x46\xca\x1a\x78\x2b\xa4\x39\x34\xe3\x21\x30\xaa\x5c\x9f\xda\x02\x73\x51\x6b\x0a\xe6\xd7\x63\x4d\x23\xf5\x92\x43\xf7\xc7\x05\x70\xc0\x88\x84\x2b\x90\xa2\x02\xe9\x86\xc8\xa9\xc7\x9a\x30\x60\xaf\xe4\xcd\xe6\xd7\xb3\x91\x29\x8e\x61\x2b\x36\x08\x37\x7f\xdd\x7c\x01\x87\xff\xd7\xe8\xe9\x85\xcc\xa1\x74\xc0\xfb\x33\x7e\xf9\xfc\xe9\x4f\xa2\x6a\x35\x80\xce\xed\xe4\xd6\x6d\x17\x82\xc4\x11\xfc\xc7\x71\x1b\x9c\x89\x0d\x27\x07\x87\xbe\xb2\xc6\xe3\x58\x3a\x94\x2e\xb2\xc6\xa1\x90\x4f\x9e\x04\x61\x56\xf6\x03\xcb\x9f\x33\x0b\xa6\xe1\x74\x4b\xe5\x41\xd7\xd5\xf7\xac\xbb\x1e\xe0\x9c\x9f\xb9\x8c\x16\xf7\x7f\xdf\xcd\x9b\xef\xc6\x5c\xe5\xd0\x37\x77\x5a\xb5\xef\x1b\x7f\xbd\xbc\x7c\x05\xd8\xad\xcc\x1a\x6f\x35\x46\xda\x16\x01\x5b\xff\x73\x7b\x7b\xb7\x5e\xb3\xc9\xf1\xa7\x6b\xaf\x8c\xb4\xfb\x48\xdb\x4c\xf4\xae\x39\xb0\x98\x7d\x87\x6c\xbb\x81\x85\x1f\x50\xbb\x5b\xad\xee\x57\x6f\x69\x4d\x91\x43\x12\x43\xa8\x0f\x78\xa0\x37\x5a\x84\x46\x47\x3f\x02\x7e\xf9\x66\x78\xde\xb5\x93\xeb\x3c\x5d\x79\x24\xaa\x0a\x8d\x0c\x58\x37\x67\x5f\x87\x39\xfb\xaa\x24\xbb\x78\x31\xa3\x13\x91\xfe\xb2\x2b\x34\x01\x5b\xde\xaf\x1f\xd8\x05\xbc\x8f\x87\x27\x7f\x3a\xa9\xef\xcf\x1a\x7c\x27\x71\x92\x3c\xd6\xda\x59\x12\x9f\x1e\xb0\x24\x1e\x5e\xe2\x49\xdc\xff\x25\x7e\x0b\x00\x00\xff\xff\x8e\xdf\x3c\xbe\x22\x07\x00\x00")

func templatesListGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesListGohtml,
		"templates/list.gohtml",
	)
}

func templatesListGohtml() (*asset, error) {
	bytes, err := templatesListGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/list.gohtml", size: 1826, mode: os.FileMode(420), modTime: time.Unix(1584292174, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMediapathGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcd\x8e\x9b\x30\x10\xbe\xf3\x14\xb3\x56\x8f\x25\xa4\xda\x43\xab\xd4\x46\x8a\xb6\x7b\xde\xa8\xdb\x4b\x8f\x0e\x1e\x8a\x55\xe3\x41\xf6\x90\x6c\x84\x78\xf7\x0a\x03\x59\x2a\xad\x2f\xc0\xcc\xf7\x33\x9e\x19\xe4\xc3\x8f\x97\xa7\x5f\xbf\x4f\xcf\xd0\x70\xeb\xca\x4c\x4e\x0f\x70\xda\xff\x51\x02\xbd\x98\x02\xa8\x4d\x99\x01\x00\xc8\x16\x59\x43\xd5\xe8\x10\x91\x95\xe8\xb9\xce\xbf\x89\x6d\xca\xeb\x16\x95\xb8\x58\xbc\x76\x14\x58\x40\x45\x9e\xd1\xb3\x12\x57\x6b\xb8\x51\x06\x2f\xb6\xc2\x3c\x7d\x7c\x06\xeb\x2d\x5b\xed\xf2\x58\x69\x87\xea\xcb\x6e\xff\x81\x14\xe3\xdb\x56\xe6\x03\x84\xee\xb9\xa1\xb0\xc1\xbc\x30\x13\xbc\x56\x4d\xef\x0c\xaf\x78\xb6\xec\xb0\xfc\x69\xe3\x5f\x38\xc6\x88\x31\xb6\xe8\x19\x8e\xa7\x93\x2c\xe6\xd4\x0c\x8b\x7c\x5b\xdf\xa7\xb3\xc3\x10\x28\xc0\x70\x0f\x4c\xa7\x22\x47\xe1\x00\x01\xcd\xf7\x7b\x7c\x9c\xe9\xc5\xc2\x97\xc5\xdc\x32\x79\x26\x73\x2b\xb3\x61\xf8\xf4\x9c\x84\x0e\x0a\x76\xe3\x08\xf2\x21\xcf\xe1\x89\xc8\x41\xe4\xbe\xae\x21\xcf\xcb\x4c\x1a\x7b\x81\xca\xe9\x18\x95\xa8\xd0\x33\x06\x34\x4b\xf1\xc3\xc0\xd8\x76\x4e\x33\x82\x88\x4d\xcf\x86\xae\x5e\x8c\x8b\x65\xf3\x58\x1e\x8d\x81\x16\x8d\xd5\xd0\x69\x6e\x0e\xb2\x68\x1e\x57\xa2\xad\x61\xb1\x5e\xf0\x89\xd3\xad\x46\xe9\x7a\xa2\x5c\xeb\x1b\x47\x59\x74\x2b\x15\xbd\x59\x3d\x6a\x0a\x2d\xe8\x8a\x2d\x79\x25\x8a\x88\x9c\x27\xbb\x7c\xb2\x13\xd0\x22\x37\x64\x94\xe8\x28\xb2\x00\xdd\x33\x55\xd4\x76\x0e\x19\x95\xa0\xba\x16\xef\xed\x94\x4e\x9f\xd1\x41\x4d\x41\x89\xa4\x90\x04\xca\x57\xe4\xff\xeb\x4f\xb0\x0d\xcd\xfa\xae\x67\x48\xbd\x5d\x16\xe9\x00\x5f\xf7\xfb\xee\x4d\x80\x35\x5b\x29\xe0\x5b\x77\xdf\x99\x79\x3b\x36\x3e\xef\x82\xe7\x9e\x99\xfc\x82\x8e\xfd\xb9\xb5\x9c\xca\x90\xc5\x9c\x59\xb6\xa1\x98\x2e\x3e\x4d\xd3\xd8\x4b\x99\x65\xb2\x98\xc7\x29\x8b\xf4\xa3\xfc\x0b\x00\x00\xff\xff\x82\x45\xc1\x10\x38\x03\x00\x00")

func templatesMediapathGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMediapathGohtml,
		"templates/mediapath.gohtml",
	)
}

func templatesMediapathGohtml() (*asset, error) {
	bytes, err := templatesMediapathGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/mediapath.gohtml", size: 824, mode: os.FileMode(420), modTime: time.Unix(1584480345, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesShutdownGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcf\x51\x6e\x83\x30\x0c\x80\xe1\xf7\x9e\xc2\xf2\x3b\x62\x7b\xa5\xc0\x25\x76\x82\x84\x04\xb0\x9a\xd8\x11\x31\xdd\x10\xe2\xee\xd3\xa0\x6b\xe9\xa3\x2d\xd9\x9f\xfe\x75\x75\xbe\x27\xf6\x80\x79\x9c\xd5\xc9\x37\xe3\xb6\x5d\x00\x00\x6a\x47\x77\xc8\xba\x04\xdf\x60\x34\xd3\x40\x5c\x58\x51\x95\x58\xc1\xe7\x47\xfa\xb9\xc2\x63\xa9\x92\x8e\x0d\xb6\xfb\xdd\x7e\xdb\xcb\x14\xc1\x74\x4a\xc2\x0d\x96\xcf\xd7\x10\xbd\x8e\xe2\x1a\x4c\x92\x15\xa1\x0b\x26\xe7\x06\xfb\x20\x46\x8b\x89\x86\x51\xf1\x5d\xac\x76\x28\x19\xe7\x88\x87\x63\x70\x94\x53\x30\x4b\x45\x1c\x88\x7d\x61\x83\x74\xb7\xeb\x89\xde\x79\x3b\xab\x0a\x83\x2e\xc9\x37\x98\x67\x1b\xe9\xa5\x59\x65\xb0\xca\x45\x20\xbe\x3d\xb9\x7f\x02\x4e\x65\xef\x1e\x9c\x41\x6c\xbf\x1e\x49\x75\x79\x58\xa7\xf6\xf2\x2f\xfe\x98\xeb\xd2\xd1\xbd\xbd\xac\xab\x67\xb7\x6d\xbf\x01\x00\x00\xff\xff\xb7\xed\x40\x3d\x6c\x01\x00\x00")

func templatesShutdownGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesShutdownGohtml,
		"templates/shutdown.gohtml",
	)
}

func templatesShutdownGohtml() (*asset, error) {
	bytes, err := templatesShutdownGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/shutdown.gohtml", size: 364, mode: os.FileMode(420), modTime: time.Unix(1573378362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/add.gohtml":       templatesAddGohtml,
	"templates/detail.gohtml":    templatesDetailGohtml,
	"templates/list.gohtml":      templatesListGohtml,
	"templates/mediapath.gohtml": templatesMediapathGohtml,
	"templates/shutdown.gohtml":  templatesShutdownGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"add.gohtml":       &bintree{templatesAddGohtml, map[string]*bintree{}},
		"detail.gohtml":    &bintree{templatesDetailGohtml, map[string]*bintree{}},
		"list.gohtml":      &bintree{templatesListGohtml, map[string]*bintree{}},
		"mediapath.gohtml": &bintree{templatesMediapathGohtml, map[string]*bintree{}},
		"shutdown.gohtml":  &bintree{templatesShutdownGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
