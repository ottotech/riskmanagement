<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="text" content="">
    <meta name="author" content="Otto Schuldt">
    <title>Risk Assessment APP</title>
    <style>
        table, th, td {
            border: 1px solid black;
        }
        table {
            border-collapse: collapse;
            width: 500px;
            margin-bottom: 10px;
        }
        th, tr {
            height: 20px;
        }
        a {
            color: #0f3e68;
            cursor: pointer;
        }
        a:hover {
            color: #00A8FF;
        }
        .not-allowed {
            cursor: not-allowed;
        }
        .highlight td {
            border-color: rgba(255, 204, 34, 0.97);
            border-width: 2px;
        }
    </style>
</head>
<body>
{{$RiskMatrix := .RiskMatrix}} <!-- Cool stuff -->
{{$Risks := .Risks}} <!-- Cool stuff -->
<div class="centered">
    {{template "shutdown"}}
    <a href="/">Return</a>
    <h2>RISK MATRIX DETAIL</h2>
    <h3>Project name:</h3>
    <p style="margin: 0">{{$RiskMatrix.Project}}</p>
    <br>
    <a id="jsCreate">Add risk in Risk Matrix</a>
    <a style="margin-left: 10px" id="jsSave">Save</a>
    <input tabindex="-1" id="js_risk_matrix_id" hidden value="{{$RiskMatrix.ID}}">
    <table id="myTable">
        <tr>
            <th>Risk</th>
            <th>Probability</th>
            <th>Impact</th>
            <th>Risk Classification</th>
            <th>Risk Response Plan</th>
            <th>Action</th>
        </tr>
        {{if gt (len $Risks) 0 }}
            {{range $Risks}}
                <tr>
                    <td><input disabled class="not-allowed" value="{{.Name}}"></td>
                    <td><input disabled class="not-allowed" value="{{.Probability}}"></td>
                    <td><input disabled class="not-allowed" value="{{.Impact}}"></td>
                    <td><input disabled class="not-allowed" value="{{.Classification}}"></td>
                    <td><textarea disabled rows="4">{{.Strategy}}</textarea></td>
                    <td><a class="delete" data-state="old" data-risk-id="{{.ID}}">delete</a></td>
                </tr>
            {{end}}
        {{end}}
    </table>
    <img src="/media/{{$RiskMatrix.Path}}" alt="Risk Matrix" width="{{$RiskMatrix.MatImgWidth}}" height="{{$RiskMatrix.MatImgHeight}}">
</div>

<script>
// Let's add the event listeners to DOM elements.
document.getElementById("jsSave").addEventListener("click", function (event) {
    event.preventDefault();
    handleRisksSave(event)
});

document.getElementById("jsCreate").addEventListener("click", function (event) {
    event.preventDefault();
    handleRiskCreation()
});

document.querySelectorAll(".delete").forEach(item => {
    item.addEventListener("click", function (event) {
        event.preventDefault();
        handleRiskDelete(event)
    })
});


    function handleRiskCreation() {
        // get table
        let table = document.getElementById("myTable");
        // insert new row
        let newRow = table.insertRow(-1);
        // let's style the new row
        newRow.className = "highlight";
        // get cells
        let cell1 = newRow.insertCell(0);
        let cell2 = newRow.insertCell(1);
        let cell3 = newRow.insertCell(2);
        let cell4 = newRow.insertCell(3);
        let cell5 = newRow.insertCell(4);
        let list = [cell1, cell2, cell3, cell4];
        // append input into cells
        for (let i = 0; i < list.length; i++) {
            // create input element
            let input = document.createElement("INPUT");
            // define input type
            input.type = "text";
            // on cell4 (risk classification) we disable the cell
            if (i === 3) {
                input.disabled = true;
                input.className = "not-allowed"
            }
            // append input into cell
            list[i].appendChild(input);
        }

        // in cell5 we will add a "textarea"
        let textareaEl = document.createElement("textarea");
        textareaEl.rows = 4;
        cell5.appendChild(textareaEl);

        // in cell6 we will add the delete element ("<a>") with the corresponding event listener
        let cell6 = newRow.insertCell(5);
        let deleteEl = document.createElement("a");
        deleteEl.setAttribute("data-state", "new");
        deleteEl.setAttribute("data-risk-id", "");
        deleteEl.className = "delete";
        deleteEl.innerText = "delete";
        deleteEl.addEventListener("click", handleRiskDelete)
        cell6.appendChild(deleteEl);
    }

    function handleRisksSave(e) {
        // get table
        let table = document.getElementById("myTable");
        let rows = table.rows;
        let list = [];
        let riskMatrixID = document.getElementById("js_risk_matrix_id").value;

        // if there are no rows (only the headers' table), we do nothing
        if (rows.length === 1) {
            return
        }
        for (let i = 1; i < rows.length; i++) {
            let obj = {};
            let risk = rows[i].cells[0].childNodes[0].value;
            let probability = rows[i].cells[1].childNodes[0].value;
            let impact = rows[i].cells[2].childNodes[0].value;
            let classification = rows[i].cells[3].childNodes[0].value;
            let strategy = rows[i].cells[4].childNodes[0].value;

            // validation should be improved
            if (risk === "") {
                continue
            }

            obj["risk_matrix_id"] = parseInt(riskMatrixID);
            obj["name"] = risk;
            obj["probability"] = parseInt(probability);
            obj["impact"] = parseInt(impact);
            obj["classification"] = classification;
            obj["strategy"] = strategy;
            list.push(obj);
        }

        // make AJAX request
        let xhr = new XMLHttpRequest();
        let formData = new FormData();

        // handle response
        xhr.onreadystatechange = function () {
            if(xhr.readyState === XMLHttpRequest.DONE){
                if (xhr.status === 200){
                    console.log("SUCCESS");
                    window.location = "/get/" + riskMatrixID
                } else if (xhr.status === 400) {
                    alert(xhr.responseText);
                } else {
                    console.log("ERROR");
                    console.log(xhr.responseText);
                    alert(xhr.responseText);
                }
            }
        };

        formData.append("data", JSON.stringify(list));
        xhr.open("POST", '/add-risks');
        xhr.send(formData);
    }

    function handleRiskDelete(e) {
        let riskID = e.target.getAttribute("data-risk-id");
        let state = e.target.getAttribute("data-state");

        // when the risk is new and is not saved in the storage.
        // It is safe to remove the row.
        if (state === "new") {
            e.target.parentElement.parentElement.remove();
            return
        }

        // make AJAX request
        let xhr = new XMLHttpRequest();
        let formData = new FormData();

        // handle response
        xhr.onreadystatechange = function () {
            if(xhr.readyState === XMLHttpRequest.DONE){
                if (xhr.status === 200){
                    console.log("SUCCESS");
                    let riskMatrixID = document.getElementById("js_risk_matrix_id").value;
                    window.location = "/get/" + riskMatrixID
                }else {
                    console.log("ERROR");
                    console.log(xhr.responseText);
                    alert(xhr.responseText);
                }
            }
        };

        formData.append("risk_id", riskID);
        xhr.open("POST", '/delete-risks');
        xhr.send(formData);
    }
</script>

</body>
</html>